# -*- coding: utf-8 -*-
"""Sprint.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D0jPMKaKZeNaOW11NJlbqaoqQE-ssEHm
"""

from tensorflow.keras.datasets import mnist #mnist dataset

(X_train, y_train), (X_test, y_test) = mnist.load_data() #splitting the mnist data into train and test

import numpy
import tensorflow #open source used for both ML and DL for computation
from tensorflow.keras.datasets import mnist #mnist dataset
from tensorflow.keras.models import Sequential #it is a plain stack of layers
from tensorflow.keras import layers #A Layer consists of a tensor- in tensor-out computat ion funct ion
from tensorflow.keras.layers import Dense, Flatten #Dense-Dense Layer is the regular deeply connected r
#faltten -used fot flattening the input or change the dimension
from tensorflow.keras.layers import Conv2D #onvoLutiona l Layer
from keras.optimizers import Adam #opt imizer
from keras. utils import np_utils #used for one-hot encoding
import numpy as np
import matplotlib.pyplot as plt   #used for data visualization

(x_train, y_train), (x_test, y_test)=mnist.load_data () #splitting the mnist data into train and test

print (x_train.shape)  #shape is used for give the dimens ion values #60000-rows 28x28-pixels
print (x_test.shape)

x_train[0]

plt.imshow(x_train[6000])     #ploting the index=image

np.argmax(y_train[6000])

#Reshaping to format which CNN expects (batch, height, width, channels)
x_train=x_train.reshape (60000, 28, 28, 1).astype('float32')
x_test=x_test.reshape (10000, 28, 28, 1).astype ('float32')

number_of_classes = 10  #storing the no of classes in a variable

y_train = np_utils.to_categorical (y_train, number_of_classes) #converts the output in binary format
y_test = np_utils.to_categorical (y_test, number_of_classes)

#create model
model=Sequential ()

#adding modeL Layer
model.add(Conv2D(64, (3, 3), input_shape=(28, 28, 1), activation='relu'))
model.add(Conv2D(32, (3, 3), activation = 'relu'))

#flatten the dimension of the image
model.add(Flatten())

#output layer with 10 neurons
model.add(Dense(number_of_classes,activation = 'softmax'))

#Compile model
model.compile(loss= 'categorical_crossentropy', optimizer="Adam", metrics=['accuracy'])

x_train = np.asarray(x_train)
y_train = np.asarray(y_train)

#fit the model
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=5, batch_size=32)

# Final evaluation of the model
metrics = model.evaluate(x_test, y_test, verbose=0)
print("Metrics (Test loss &Test Accuracy) : ")
print(metrics)

prediction=model.predict(x_test[6000:6001])
print(prediction)

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import datasets, layers, models
(train_images, train_labels) = datasets.mnist.load_data()
import matplotlib.pyplot as plt
train_images = train_images[0] / 255
plt.imshow(train_images[0])

import numpy as np
print(np.argmax(prediction, axis=1)) #printing our Labels from first 4 images

np.argmax(y_test[6000:6001]) #printing the actual labels

# Save the model
model.save('models/mnistCNN.h5')